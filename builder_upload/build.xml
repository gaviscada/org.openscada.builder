<?xml version="1.0" encoding="UTF-8"?>

<project name="builder.upload" default="default" basedir=".">
    <description>
            Uploader
    </description>
	
	<property environment="env"/>
	
	<property name="target.base" location="target"/>
	
	<property name="build.root" location="${basedir}"/>
	<property name="source.root" location="${basedir}/.."/>
	
	<property name="builder.profile" value="local"/>
	<import file="global/profile.d/profile.${builder.profile}.ant"/>
	
	<import file="${build.root}/global/lib.xml"/>

	<!-- 
	  - the jobSuffix is set in the profile
	  -->
	<property name="jobSuffix" value="release"/>
	<property name="ikvm.version" value="${deploy.version}"/>
	
    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="gather">
    </target>
	
	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean">
        <delete dir="gather" failonerror="false"/>
    </target>

	<!-- ================================= 
          target: gather              
         ================================= -->
    <target name="gather" depends="clean,gather.ikvm">
    	<mkdir dir="gather"/>

    	<echo message="JobSuffix: ${jobSuffix}"/>
    	
    	<gatherUpload name="builder.upload" artifact="builder.global" version="${deploy.version}" job="org.openscada.builder-${jobSuffix}" />

    	<gatherRepo name="external" repository="org.openscada.external.sdk" version="${external.version}" job="org.openscada.external-${jobSuffix}"/>
    	<gatherRepo name="jinterop" repository="org.openscada.jinterop.p2" version="${jinterop.version}" qualifier="-SNAPSHOT" job="org.openscada.jinterop-${jobSuffix}-tycho" suffix=""/>
		<gatherRepo name="utgard" repository="org.openscada.utgard.p2" version="${utgard.version}" qualifier="-SNAPSHOT"  job="org.openscada.utgard-${jobSuffix}-tycho" suffix=""/>
        <gatherRepo name="atlantis" repository="org.openscada.atlantis.p2" version="${atlantis.version}" qualifier="-SNAPSHOT"  job="org.openscada.atlantis-${jobSuffix}-tycho" suffix=""/>
		<gatherRepo name="deploy" repository="org.openscada.deploy.repo" version="${deploy.version}" job="org.openscada.deploy-${jobSuffix}"/>
    	<gatherRepo name="tauri" repository="org.openscada.tauri" version="${tauri.version}" job="org.openscada.tauri-${jobSuffix}"/>
    	<gatherRepo name="contrib" repository="org.openscada.contrib.sdk" version="${contrib.version}" job="org.openscada.contrib-${jobSuffix}"/>
    	<gatherRepo name="ide" repository="org.openscada.ide.p2" version="1.2.0" qualifier="-SNAPSHOT" job="org.openscada.ide-${jobSuffix}-tycho" suffix=""/>
        
        <mkdir dir="${target.base}/download/installer/openscada_common_driver_extension/${buildType}"/>
        <get src="${env.HUDSON_URL}/job/setup-openscada-common-driver-extension-${jobSuffix}/lastSuccessfulBuild/artifact/setup_openscada_common_drivers/openscada_common_driver_extensions_${deploy.version}-SNAPSHOT_x86.msi" dest="${target.base}/download/installer/openscada_common_driver_extension/${buildType}"/>
        <get src="${env.HUDSON_URL}/job/setup-openscada-common-driver-extension-${jobSuffix}/lastSuccessfulBuild/artifact/setup_openscada_common_drivers/openscada_common_driver_extensions_${deploy.version}-SNAPSHOT_x64.msi" dest="${target.base}/download/installer/openscada_common_driver_extension/${buildType}"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: gather.ikvm
         - - - - - - - - - - - - - - - - - -->
    <target name="gather.ikvm">
		<delete dir="${target.base}/download/ikvm/${buildType}/${ikvm.version}" failonerror="false"/>
		<mkdir dir="${target.base}/download/ikvm/${buildType}/${ikvm.version}"/>
    	<get src="${env.JENKINS_URL}/job/org.openscada.builder.ikvm-${jobSuffix}/lastSuccessfulBuild/artifact/builder_ikvm/output/*zip*/output.zip" dest="${target.base}/download/ikvm/${buildType}/${ikvm.version}/org.openscada.ikvm-${buildType}-${ikvm.version}.zip"/>
    </target>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: gatherRepo          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="gatherRepo">
        <attribute name="name"/>
    	<attribute name="job"/>
    	<attribute name="version"/>
    	<attribute name="repository"/>
    	<attribute name="buildType" default="${buildType}"/>
    	<attribute name="path" default="output" />
    	<attribute name="suffix" default="-p2repo" />
    	<attribute name="qualifier" default="" />
    	<attribute name="jenkinsBase" default="${env.JENKINS_URL}" />
        <sequential>
        	
        	<echo message="Checking flag: ${gather.@{name}} (full: ${gather.full})"/>
        	
        	<if>
        		
        		<or>
    				<istrue value="${gather.full}"/>
        			<istrue value="${gather.@{name}}"/>
        		</or>
        		
        		<then>
        	
		        	<!-- create download dir -->
		        	
		        	<delete dir="${target.base}/download/@{name}/@{buildType}/@{version}" failonerror="false"/>
		        	<mkdir dir="${target.base}/download/@{name}/@{buildType}/@{version}"/>
		        	
		        	<!-- copy p2repo to download -->
		        	
		        	<get dest="${target.base}/download/@{name}/@{buildType}/@{version}" src="@{jenkinsBase}/job/@{job}/lastSuccessfulBuild/artifact/@{path}/@{repository}-@{version}@{qualifier}@{suffix}.zip" usetimestamp="true"/>
        			
		        	<!-- copy unzipped version to download: we can ignored errors here -->
        			
		        	<get dest="${target.base}/download/@{name}/@{buildType}/@{version}" src="@{jenkinsBase}/job/@{job}/lastSuccessfulBuild/artifact/@{path}/@{repository}-@{buildType}.@{version}@{qualifier}.zip" usetimestamp="true" ignoreerrors="true"/>
		
		        	<!-- create repo dir -->
		        	
		        	<delete dir="${target.base}/repo/p2/@{name}/@{buildType}/@{version}" failonerror="false"/>
		        	<mkdir dir="${target.base}/repo/p2/@{name}/@{buildType}/@{version}"/>
		
		        	<!-- unzip repo -->
		        	
		        	<unzip dest="${target.base}/repo/p2/@{name}/@{buildType}/@{version}" src="${target.base}/download/@{name}/@{buildType}/@{version}/@{repository}-@{version}@{qualifier}@{suffix}.zip"/>
        			
    			</then>
        		
        	</if>
        	
        </sequential>
    </macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: gatherUpload          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="gatherUpload">
        <attribute name="name"/>
    	<attribute name="artifact"/>
    	<attribute name="job"/>
    	<attribute name="version"/>
    	<attribute name="buildType" default="${buildType}"/>
        <sequential>
        	
        	<!-- create download dir -->
        	
        	<delete dir="${target.base}/download/@{name}/@{buildType}/@{version}" failonerror="false"/>
        	<mkdir dir="${target.base}/download/@{name}/@{buildType}/@{version}"/>
        	
        	<!-- copy to download -->
        	<get dest="${target.base}/download/@{name}/@{buildType}/@{version}" src="${env.JENKINS_URL}/job/@{job}/lastSuccessfulBuild/artifact/output/@{artifact}-@{version}.zip" usetimestamp="true"/>
        </sequential>
    </macrodef>

</project>
